include: /.gitlab-templates/install-just.yml

image: "rust:latest"

default:
  before_script:
    - hostname -I
    - whoami
    - rustc --version
    - cargo --version

# Setup a cache to cache job parts between jobs to ensure faster builds
cache:
  - key: "$CI_JOB_NAME"
    untracked: true
    paths:
      - $CI_PROJECT_DIR/target/

# Set any required environment variables here (defaults)
variables:
  RUST_BACKTRACE: "FULL"

stages:
  - code-quality
  - build
  - test
  - release

### Code quality ###
# * pre-commit
# * lint
# * format
# * audit
# * error-codes

pre-commit:
  image: python:3.12
  stage: code-quality
  before_script: pip install pre-commit
  script: pre-commit run --all-files --show-diff-on-failure

lint:
  stage: code-quality
  extends: .install-just
  script:
    - rustup component add rustfmt clippy
    - just ci_lint

audit:
  stage: code-quality
  script:
    - cargo install cargo-audit
    - cargo audit

### build ###

# Build a binary with nightly rust for later jobs
rust-nightly-build:
  stage: build
  extends: .install-just
  image: rustlang/rust:nightly
  script: just build --verbose
  allow_failure: true
  artifacts:
    paths: [$CI_PROJECT_DIR/target/]
    untracked: true
    when: on_success
    expire_in: 50 mins
  cache: []

## Regression tests
regression-tests:
  stage: build
  script:
    - cargo build --release
    - tests/regression/regression_tests.sh

### Tests and safety ###
# Run unit tests with nightly build
rust-nightly-test:
  extends: .install-just
  stage: test
  image: rustlang/rust:nightly
  script: just test --verbose
  allow_failure: true
  dependencies:
    - rust-nightly-build
  cache: []

# Run tests and calculate code coverage
test-coverage:
  stage: test
  image: rustlang/rust:nightly
  extends: .install-just
  script: just test-coverage
  coverage: '/Coverage: \d+(?:\.\d+)?/'
  dependencies: []
  cache: []
  artifacts:
    paths:
      - target/coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/coverage/cobertura.xml

# Run benchmarks and check for performance regression
limited-regress-bench:
  stage: test
  before_script:
    - ls -l tests/regression/
  script:
    - tests/regression/regression_performance.sh
  rules:
    # Run this job when a tag is created
    - if: $CI_COMMIT_TAG
      when: never
    # Never create if the suffix is -bench (we're doing extended benchmarks then)
    - if: $CI_COMMIT_BRANCH =~ /^.*-bench$/
      when: never
    # Don't create it in the MR pipeline (only use branch pipelines)
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    # Create this job if branch suffix is not -bench (that unlocks the extended benchmark)
    - if: $CI_COMMIT_BRANCH !~ /^.*-bench$/
      when: always
  dependencies: []
  cache: []

# Run benchmarks and check for performance regression with bigger and more files than the limited job
extended-regress-bench:
  stage: test
  needs: []
  before_script:
    - ls -l tests/regression/
  script:
    - tests/regression/regression_performance.sh EXTENDED
  timeout: 3h 30m
  rules:
    # Run this job when a tag is created
    - if: $CI_COMMIT_TAG
      when: always
    # Don't create the job if commit message contains [skip-bench]
    - if: $CI_COMMIT_MESSAGE =~ /\[.*skip-bench.*\]/
      when: never
    # Create job for a merge commit to the normal MR target branch of the project ("master").
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: on_success
    # Allow manual creation of job if branch suffix is -bench
    - if: $CI_COMMIT_BRANCH =~ /^.*-bench$/
      when: manual
      allow_failure: true
  dependencies: []
  interruptible: true
  cache: []

## Safety
# Only includes address and leak sanitizing now, as there's simply too many false positives with memory and thread sanitizing on Rust code...
# Leak and address sanitizing is also bugged (see links below) but there's decent work arounds at the moment
leak-sanitizer:
  stage: test
  image: rustlang/rust:nightly
  variables:
    LSAN_OPTIONS: "suppressions=lsan-suppressions.txt"
    RUSTFLAGS: "-Z sanitizer=leak"
    RUST_BACKTRACE: "FULL"
  script:
    - rustup component add llvm-tools-preview
    # to fix buggy leak analyzer:
    # https://github.com/japaric/rust-san#unrealiable-leaksanitizer
    - sed -i '/\[features\]/i [profile.dev]' Cargo.toml
    - sed -i '/profile.dev/a opt-level = 1' Cargo.toml
    - cat Cargo.toml
    - rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - cargo build -Z build-std --target x86_64-unknown-linux-gnu --verbose
    - cargo test --verbose --lib --tests --all-features --target x86_64-unknown-linux-gnu
  allow_failure: true
  dependencies: []
  cache: []

address-sanitizer:
  stage: test
  image: rustlang/rust:nightly
  variables:
    ASAN_OPTIONS: "detect_odr_violation=0:detect_leaks=0"
    RUSTFLAGS: "-Z sanitizer=address"
    RUST_BACKTRACE: "FULL"
  script:
    - rustup component add llvm-tools-preview
    - rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
    - cargo build -Z build-std --target x86_64-unknown-linux-gnu --verbose
    # only --lib --tests b/c of https://github.com/rust-lang/rust/issues/53945
    - cargo test --verbose --lib --tests --all-features --target x86_64-unknown-linux-gnu
  allow_failure: true
  dependencies: []
  cache: []
