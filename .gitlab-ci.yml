image: "rust:latest"

default:
  before_script:
    - hostname -I
    - whoami
    - rustc --version
    - cargo --version

# Setup a cache to cache job parts between jobs to ensure faster builds
cache:
  - key: "$CI_JOB_NAME"
    untracked: true
    paths:
      - $CI_PROJECT_DIR/target/

# Set any required environment variables here
variables:
  RUST_BACKTRACE: "FULL"

stages:
  - test-safety
  - code-quality
  - build-and-test
  - release

pre-commit:
  image: python:3.9
  stage: code-quality
  before_script:
    - pip install pre-commit
  script:
    - python3 --version
    - pre-commit --version
    - pre-commit run --all-files --show-diff-on-failure

lint:
  stage: code-quality
  script:
    - rustup component add clippy
    - cargo check
    - cargo clean
    - cargo clippy -- -D warnings --no-deps

format:
  stage: code-quality
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check

audit:
  stage: code-quality
  script:
    - cargo install cargo-audit
    - cargo audit

rust-latest:
  stage: build-and-test
  image: rust:latest
  script:
    - cargo build --verbose
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  artifacts:
    name: "debug_${CI_COMMIT_SHA}"
    paths:
    - ./target
    expire_in: 1 mos

rust-nightly:
  stage: build-and-test
  image: rustlang/rust:nightly
  script:
    - cargo build --verbose
    - cargo test --verbose -- --test-threads=1 --nocapture
  allow_failure: true

test-coverage:
  image: rust:latest
  stage: build-and-test
  variables:
    RUSTFLAGS: "-C instrument-coverage"
    LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
  script:
    - rustup component add llvm-tools-preview
    - cargo build
    - cargo test -- --test-threads=1 --nocapture
    - cargo install grcov
    # Generate HTML report which is available as an artifact
    - grcov . --binary-path ./target/debug/ -s . -t html --branch --ignore-not-existing --ignore "*cargo*" -o ./coverage/
    # Generate file for Gitlab coverage parsing (through the summary)
    - grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
    # directly generate cobertura file
    - grcov . --binary-path ./target/debug/ -s . -t cobertura --branch --ignore-not-existing --ignore "*cargo*" -o coverage.xml
    # Output coverage for Gitlab parser (uses regex in coverage key)
    - apt-get update && apt-get install -y lcov
    - lcov --summary coverage.lcov
  coverage: /lines\.*:\s*([\d\.]+%)/
  artifacts:
    paths:
      - 'coverage'
    expire_in: 3 mos
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

## For release build
build-release-latest:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  image: rust:latest
  script:
    - echo "running release job"
    - cargo build -r --verbose
  artifacts:
    name: "release_${CI_COMMIT_TAG}"
    paths:
    - ./target

## Safety
memory-sanitizer:
  stage: test-safety
  image: rustlang/rust:nightly
  variables:
    RUSTFLAGS: "-Z sanitizer=memory"
  script:
    - rustup component add llvm-tools-preview
    - cargo build -Z build-std --target x86_64-unknown-linux-gnu --verbose
    - cargo test --verbose --tests --all-features --target x86_64-unknown-linux-gnu -- --test-threads=1 --nocapture
  allow_failure: true

leak-sanitizer:
  stage: test-safety
  image: rustlang/rust:nightly
  variables:
    LSAN_OPTIONS: "suppressions=lsan-suppressions.txt"
    RUSTFLAGS: "-Z sanitizer=leak"
  script:
    - rustup component add llvm-tools-preview
    # to fix buggy leak analyzer:
    # https://github.com/japaric/rust-san#unrealiable-leaksanitizer
    - sed -i '/\[features\]/i [profile.dev]' Cargo.toml
    - sed -i '/profile.dev/a opt-level = 1' Cargo.toml
    - cat Cargo.toml
    - cargo build -Z build-std --target x86_64-unknown-linux-gnu --verbose
    - cargo test --verbose --lib --tests --all-features --target x86_64-unknown-linux-gnu -- --test-threads=1 --nocapture
  allow_failure: true

thread-sanitizer:
  stage: test-safety
  image: rustlang/rust:nightly
  variables:
    RUSTFLAGS: "-Z sanitizer=thread"
  script:
    - rustup component add llvm-tools-preview
    - cargo build -Z build-std --target x86_64-unknown-linux-gnu --verbose
    - cargo test --verbose --tests --all-features --target x86_64-unknown-linux-gnu -- --test-threads=1 --nocapture
  allow_failure: true
